<html>
	<head><title>Curso JSP (Java Server Pages)</title></head>
<body bgcolor=#ffffff>
 
		  <a href="../convencionesjsp.html">Ir al inicio</a> | 
		  <a href="espaciosenblanco.html">Anterior</a> | 
		  <a href="paginasjspconsintaxisxml.html">Siguiente</a></a><br>


<h2>Convenciones de Nombres</h2>
<ul>
		  <li>Nombres JSP</li>
		  <li>Nombres de Etiquetas</li>
		  <li>Nombres de Prefijos de Etiquetas</li>
</ul>

<h4>Páginas JSP con Sintaxis XML</h4>
<ul>
		  <li>Estructura de un Documento JSP</li>
		  <li>Comentarios XML</li> 
		  <li>Código Java en Documentos JSP</li>
</ul>
		  
<h4>Prácticas de Programación</h4>
<ul>
	 	  12.1 . Inicialización de JavaBeans 
    12.2 . Objetos Implícitos de JSP 
    12.3 . Entrecomillado 
    12.4 . Usar Etiquetas Personalizadas 
    12.5 . Uso de TagExtraInfo y TagLibraryValidator 
    12.6 . Usar JavaScript 
    12.7 . Hojas de Estilo en Cascada (CSS) 
    12.8 . Usar Patrones de Vistas Compuestos 
    12.9 . Otras Recomendaciones 
</ul>


Convenciones de Nombres
Aplicar convenciones de nombrado hace que los elementos de nuestros componentes web sean más fáciles de identificar, clasificar y coordinar. En esta sección, veremos estas convenciones específicas para JSP. 

Nombres JSP
Un nombre (fichero) JSP siempre debería empezar con una letra minúscula. El nombre podría constar de varias palabras, en cuyo caso las palabras se situarán juntas y cada palabra comenzará con una letra mayúscula. Un nombre JSP puede ser un simple nombre o una sentencia corta. Se debe evitar un nombre JSP que sea sólo un verbo, ya que no proporciona suficiente información a los desarrolladores. Por ejemplo: 

perform.jspno es tan claro como 

performLogin.jspEn el caso de que un verbo forme parte de un nombre JSP, se debe utilizar su forma presente como una acción: 

showAccountDetails.jspse prefiere a : 

showingAccountDetails.jspNombres de Etiquetas
Abajo podemos ver las convenciones de manejadores de etiquetas y sus clases asociadas: 

Descripción  Nombre de Clase  
XXX tag extra info (descendiente de javax.servlet.jsp.tagext.TagExtraInfo) XXXTEI  
XXX tag library validator (descendiente de javax.servlet.jsp.tagext.TagLibraryValidator) XXXTLV  
XXX tag handler interface (descendiente de javax.servlet.jsp.tagext.Tag/IterationTag/BodyTag) XXXTag  
XXX tag handler implementation XXXTag  

Además, los nombres de etiquetas no deben violar las convenciones de nombres de clases e interfaces que se especifican en la convención de codificación de código Java. 

Para distinguir una clase de una etiqueta importante de otras clases, se puede aplicar un sufijo de paquete, de etiqueta o de librería de etiquetas al nombre de paquete de la clase, por ejemplo: 

com.mycorp.myapp.tags.XXXTagNombres de Prefijos de Etiquetas
Un prefijo de etiqueta debería ser un nombre corto pero significativo, y el primer carácter debería ser en minúsculas. Un prefijo de etiqueta no debería contener caracteres no-alfabéticos. Aquí tenemos algunos ejemplo: 

Ejemplo  OK?  
mytaglib  no 
myTagLib  si 
MyTagLib  no 
MyTagLib1  no 
My_Tag_Lib  no 
My$Tag$Lib  no 

Páginas JSP con Sintaxis XML
JSP proporciona dos sintaxis distintas: una 'sintaxis estándar' para escribir páginas JSP y una 'sintaxis XML' para escribir JSP como un documento XML. Las JSPs que se escriben usando la sintaxis estándar son conocidas como 'Páginas JSP'; y las que se escriben usando la sintaxis XML son conocidas como "Documentos JSP'. Este artículo se dirige principalmente a las páginas JSP, pero muchos de los conceptos se pueden aplicar también a los documentos JSP. Se espera que el uso de documentos JSP se incremente según vaya creciendo la utilización de XML, y para corregir esto la especificación JSP 2.0 presentará una sintaxis XML mucho más amigable. 

Se debería observar que la sintaxis XML usada por el autor de JSPs es distinta y normalmente se confunde con la vista XML de una página JSP. El autor de la página usa la sintaxis estándar o XML para crear el JSP. Pero el contenedor la traduce a su vista XML, que se expone en la Tag Library Validators. 

Estructura de un Documento JSP
Los documentos JSP tienen las siguiente estructura básica: 

    <? xml version="1.0" ?>
    <!-- 
      - Author(s): 
      - Date:
      - Copyright Notice:
      - @(#)
      - Description:
      -->
    <jsp:root   xmlns:jsp="http://java.sun.com/JSP/Page"
     xmlns:prefix1="URI-for-taglib1"
     xmlns:prefix2="URI-for-taglib2"
     version="1.2">
        JSP Document ...
    </jsp:root>
La primera línea es un Prólogo XML opcional que define la página como un documento XML. Después del prólogo opcional vienen los comentarios del documento. El elemento <jsp:root> define este como un Documento JSP y debe aparecer como el elemento raíz. Se debe importar el espacio de nombres jsp, y todas las librerías de etiquetas se deben importar utilizando este elemento raíz. El atributo version es obligatorio y especifica qué versión de JSP se está utilizando. El contenido real del documento JSP aparece como sub-elementos del elemento <jsp:root>. Se deberían aplicar las reglas de identación estándar de XML en todo el documento, usando 4 espacios en blanco como una simple unidad de identación. 

Un Documento JSP debe ser un documento XML bien-formateado, por eso algunos elementos, como <% %> deben ser reemplazados por sus equivalentes XML, como <jsp:scriptlet />. 

Comentarios XML
La especificación JSP no es muy clara sobre como se ponen en la salida los comentarios del estilo XML, por eso para estar seguros de si se pretende que un comentario llegue al cliente, debería encerrarse en un nodo <jsp:text>, de esta forma: 

    ...
    <jsp:text><![CDATA[
        <!--
          - Multiline comment
          - to be sent to client.
          -->
    ]]></jsp:text>
    ...
Código Java en Documentos JSP
Cuando se escribe código Java dentro de declaraciones, scriptlets, y expresiones, se debería utilizar un elemento CDATA siempre que sea necesario para asegurar que nuestro código no nombre la estructura del documento. 

    ...
    <jsp:scriptlet>
        for( int level = 0; level < 3; level++ ) {
    </jsp:scriptlet>
    <tr>
        <td>
            <jsp:expression><![CDATA[
                "<h" + level + ">Text</h" + level + ">"
            ]]></jsp:expression>
        </td>
    </tr>
    <jsp:scriptlet>
        }
    </jsp:scriptlet>
    ...
Al contrario que los de la sintaxis estándar, se debe seguir las reglas de identación XML sin importar los contenidos de un elemento. 

Prácticas de Programación
En general, debemos evitar escribir código Java (declaraciones, scriptlets e expresiones) en nuestras páginas JSP, por estas razones: 

Los errores de sintaxis en el código Java de un página JSP no se detectan hasta que la página se ha desplegado. Por otro lado, los errores de sintaxis en librerías de etiquetas y servlets se detectan con anterioridad. 
El código Java en páginas JSP es difícil de depurar. 
El código Java en páginas JSP es difícil de mantener, especialmente para los autores de la página que podrían no ser expertos en Java. 
Es una práctica generalmente aceptada no mezclar lógicas de negocio complejas con la lógica de presentación. Las páginas JSP se crearon principalmente para la lógica de presentación. 
El código que contenga código Jaba, HTML y otras instrucciones de script puede ser muy difícil de leer. 
JSP 2.0 desaconseja los scriptlets en favor de un lenguaje de expresiones más simple. Será más fácil evolucionar nuestras páginas hacia el estilo de programación JSP 2.0 si no usamos código Java en nuestras páginas. 
Inicialización de JavaBeans
JSP proporciona un elemento conveniente para inicializar todas las propiedades identificadas por un PropertyDescriptor de un JavaBean, por ejemplo: 

    <jsp:setProperty name="bankClient" property="*"/>
Sin embargo, esto se debería utilizar con cuidado. Primero, si el bean tiene una propiedad, digamos amount, y no existe dicho parámetro (amount) en el objeto ServletRequest actual o el valor del parámetro es "", no se hace nada: la página JSP ni siquiera usará null para seleccionar esa propiedad particular del bean. Pero, si el valor ya está asignado a amount en el bean bankClient, no le afecta. Segundo, las propiedades no elementales que no tienen definidos PropertyEditors podrían ni ser inicializadas implícitamente desde un valor String del objeto ServletRequest y se podría necesitar una conversión explícita. Tercero. usuarios malintencionados pueden añadir parámetros adicionales a la solicitud, y seleccionar propiedades no deseadas en el bean, si la aplicación no está cuidadosamente diseñada. 

Si aún así preferimos usar property="*" en la etiqueta jsp:setProperty para producir el código anterior, recomendamos que añadas un comentario precediendo a la etiqueta jsp:setProperty indicando los parámetros que deben estar presentes en el objeto ServletRequest para inicializar el bean. Por eso, en el siguiente ejemplo, a través del comentario, sabemos que necesitamos los parámetros firstName y lastName para inicializar el bean bankClient: 

<%--
  -  requires firstName and lastName from the ServletRequest 
  --%>
<jsp:setProperty name="bankClient" property="*" />
Objetos Implícitos de JSP
Es preferible el uso de objetos implícitos JSP para obtener referencias a estos objetos en vez de utiliza llamadas al API. Por eso, en lugar de utilizar: 

    getServletConfig().getServletContext().getInitParameter("param")
para acceder al parámetro de inicialización proporcionado por el ejemplar ServletContext, podemos hacer uso del objeto implícito disponible: 

    application.getInitParameter("param")
En el caso de que sólo se saque el valor de un parámetro de inicialización, sería incluso mejor utilizar JSTL para acceder a dicho parámetro: 

    <c:out value="${initParam['param']}" />
Entrecomillado
Se adopta el uso de entrecomillado uniforma. Se deberían utilizar comillas dobles (") en lugar de dos caracteres apóstrofe ('). 

Entrecomillado No-Uniforme  Entrecomillado Preferido  
<%@ page import='javabeans.*'%>
<%@ page import="java.util.*" %>
 <%@ page import="javabeans.*" %>
<%@ page import="java.util.*" %>
 

Hay una excepción en la que se necesitan los apóstrofes, por ejemplo, cuando se necesitan las dobles comillas dentro del lenguaje de script: 

    <jsp:include page='<%= getFoodMenuBar("Monday") %>' />
Usar Etiquetas Personalizadas
Si una etiqueta personalizada no tiene contenido en el cuerpo, el contenido debería declararse explícitamente como vacío (en vez del valor por defecto "JSP"), como en este descriptor de librería de etiquetas 

<tag>
    <name>hello</name>
    <tag-class>com.mycorp.util.taglib.HelloTagSupport</tag-class>
    <body-content>empty</body-content>
    ...
</tag>
Esto le dice al contenedor JSP que el contenido del cuerpo debe estar vacío en vez de contener cualquier sintaxis JSP. El efecto es eliminar la asignación innecesaria de recursos para analizar los contenidos vacíos de un cuerpo. 

Las etiquetas vacías se deberían escribir como elementos cortos de XML, en vez de usar elementos XML de apertura y de cierre, para así mejorar la legibilidad, por eso es preferible <myTag:hello /> que <myTag:hello></myTag:hello>. 

Uso de TagExtraInfo y TagLibraryValidator
Algunas veces, las formas válidas para usar una librería de etiquetas no se pueden expresar usando sólo TLD. Entonces, se debería escribir una clase TagExtraInfo o una clase TagLibraryValidator y deberíamos registrarlas en el TLD para que poder capturar en tiempo de traducción los errores en la librería de etiquetas. 

Usar JavaScript
El código JavaScript debería ser independiente de las características particulares de los distintos tipos de navegadores para poder ejecutar los scripts de la forma apropiada. 

Cuando tenga sentido, es una buena idea mantener el código JavaScript en ficheros individuales separados de los cuerpos JSP, y usar sentencias como esta para importar el código JavaScript en las páginas JSP: 

<script language=javascript src="/js/main.js">
Esto mejora la oportunidad de reutilización del código JavaScript, mantiene el comportamiento consistentes del código JavaScript entre varios JSPs, y reduce la complejidad de las páginas JSP. 

Hojas de Estilo en Cascada (CSS)
Debemos usar hojas de estilo en cascada para centralizar las características comunes de cabeceras, tablas, etc. Esto mejorará la consistencia de la presentación para los usuarios y reduce el mantenimiento y el tamaño del código de las páginas JSP. Por eso en lugar de embeber la información de estilo en las etiquetas HTML como estas: 

<H1><FONT color="blue">Chapter 1</FONT></H1>
...
<H1><FONT color="blue">Chapter 2</FONT></H1>
...
Definimos información de estilo en una sola hoja de estilo myJspStyle.css que contiene: 

H1 { color: blue }
Y aplicamos la hoja de estilo a la página JSP: 

<link rel="stylesheet" href="css/myJspStyle.css" type="text/css">
...
<H1>Chapter 1</H1>
...
<H1>Chapter 2</H1>
...
Usar Patrones de Vistas Compuestos
Cuando un JSP requiere una estructura compleja que también podría repetirse en otras JSPs, una forma de manejar esto es dividirla en partes, usando el patrón Composite View. Por ejemplo, algunas veces una JSP tiene la siguiente representación: 

header 
menu bar main body







 
footnote 
footer 

De esta forma, este JSP compuesto se puede dividir en diferentes módulos, cada uno realizado en un JSP separado. Los JSPs constituyente se puede situar en sus localizaciones apropiadas en el JSP compuesto, usando etiquetas JSP include en tiempo de compilación o tiempo de solicitud. En general, cuando se utiliza la directiva include estática para incluir una página que no va a ser solicitada por sí misma, debemos recordar la utilización de la extensión .jspf y situar el fichero en el directorio /WEB-INF/jspf/ de la aplicación Web. Por ejemplo: 

<%@ include file="/WEB-INF/jspf/header.jspf" %>
...
<%@ include file="/WEB-INF/jspf/menuBar.jspf" %>
...
<jsp:include page="<%= currentBody %>" />
...
<%@ include file="/WEB-INF/jspf/footnote.jspf" %>
...
<%@ include file="/WEB-INF/jspf/footer.jspf" %>
...
Otras Recomendaciones
En este artículo se han presentado un conjunto de convenciones de codificación para producir código JSP y artefactos Web más fáciles de mantener y más consistentes. Hay otras buenas prácticas que podemos utilizar para conseguir mejorar este objetivo. Por ejemplo, la especificación JSP 1.2 recomienda: 

Definir Nuevos Objetos Implícitos 
Acceder a Información Específica-de-Vendedor 
Personalizar una Librería de Etiquetas 
Además, Java BluePrints ofrece mejores prácticas a mayor escala, como usar el patrón Model-View-Controller 

 
Últimos comentarios
4 comentarios
De Gran Ayuda (30/05/2003)
Por Darwin Granda 
Me parece un muy buen manual "Convenciones de Programacion Java para JSP", pero me gustaria que me pudieran ayudar con este mismo manual en formato pdf.
Menú dinamico en jsp (16/05/2003)
Por Eduardo 
Hola, como puedo hacer un menú dinamico, por ejemplo según un usuario.

gracias,

Edo
Excelente (06/04/2003)
Por Augusto Vyhmeister 
Excelente Tutorial. Siempre es bueno seguir los estandares aplicándolos a la realizadad de la aplicación a contruir o alguna existente. Eso mejora el tiempo de desarrolló, implementación y mantención ( sobre todo la detección de errores)
Cualquier comentario al respecto pueden comunicarse conmigo.

Convenciones version 0.0.1 beta (05/04/2003)
Por JoseMiguel 
Asi como las convenciones de Sun para Java son muy buenas, estas convenciones para JSP las han trabajado muy poco y son propuestas poco utiles.
De todo el documento solo me parece bien
- La estructura de directorios
- Sacar todo el código posible fuera de las páginas JSP, para facilitar debug.
- El tener JavaScript y CSS en archivos externos  Utilidades
 Leer comentarios (4) 
 Escribir comentario 
  Puntuación:
    (11 votos) 
 Votar 
 Recomendar este artículo 
 Estadísticas 

 
Patrocinados
  
 

Copyright © 1999-2004 Programación en castellano. Todos los derechos reservados

</body>
</html>
